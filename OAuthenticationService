import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.util.Base64;
import java.util.Map;

@Component
public class OAuthenticationService {

    @Value("${OATH_AUTHORIZATION}")
    private String authString;

    @Value("${OATH_SERVICE_END_POINT_URL}")
    private String authUrl;

    private RestTemplate restTemplate = new RestTemplate();
    private static final Logger LOGGER = LoggerFactory.getLogger(OAuthenticationService.class);

    private String cachedToken = null;
    private Instant tokenExpirationTime = null;

    public String getOathAccessToken() {
        if (cachedToken != null && tokenExpirationTime != null && Instant.now().isBefore(tokenExpirationTime)) {
            return cachedToken;
        }

        String accessToken = null;

        try {
            String base64Creds = Base64.getEncoder().encodeToString(authString.getBytes(StandardCharsets.UTF_8));
            HttpHeaders headers = new HttpHeaders();
            headers.add("Authorization", "Basic " + base64Creds);
            headers.add("Content-Type", "application/x-www-form-urlencoded");

            HttpEntity<Void> request = new HttpEntity<>(headers);

            ResponseEntity<Map<String, String>> response = restTemplate.exchange(authUrl, HttpMethod.POST, request, new ParameterizedTypeReference<>() {});

            if (null == response.getBody()) {
                throw new RestClientException("No access token received from auth service");
            }

            accessToken = response.getBody().get("access_token");
            int expiresIn = Integer.parseInt(response.getBody().get("expires_in"));
            tokenExpirationTime = Instant.now().plusSeconds(expiresIn);
            cachedToken = accessToken;

        } catch (RestClientException e) {
            LOGGER.error("Oath Service Exception:", e);
            throw e;
        }

        return accessToken;
    }
}
