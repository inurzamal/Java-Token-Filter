import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.annotation.PostConstruct;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.util.Base64;
import java.util.Map;

@Component
public class OAuthenticationService {

    private static final Logger LOGGER = LogManager.getLogger(OAuthenticationService.class);

    @Value("${OATH_AUTHORIZATION}")
    private String authString;

    @Value("${OATH_SERVICE_END_POINT_URL}")
    private String authUrl;

    private WebClient webClient;
    private String cachedToken;
    private Instant tokenExpirationTime;

    private final WebClient.Builder webClientBuilder;

    public OAuthenticationService(WebClient.Builder webClientBuilder) {
        this.webClientBuilder = webClientBuilder;
    }

    @PostConstruct
    private void init() {
        this.webClient = webClientBuilder.baseUrl(authUrl).build();
    }

    public Mono<String> getOathAccessToken() {
        LOGGER.info("Entry OAuthenticationService: getOathAccessToken() method.");

        if (cachedToken != null && tokenExpirationTime != null && Instant.now().isBefore(tokenExpirationTime)) {
            LOGGER.info("Using cached token");
            return Mono.just(cachedToken);
        }

        String base64Creds = Base64.getEncoder().encodeToString(authString.getBytes(StandardCharsets.UTF_8));
        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Basic " + base64Creds);
        headers.add("Content-Type", "application/x-www-form-urlencoded");

        return webClient.post()
                .uri(authUrl)
                .headers(httpHeaders -> httpHeaders.addAll(headers))
                .retrieve()
                .onStatus(HttpStatus::isError, clientResponse ->
                        Mono.error(new WebClientResponseException(
                                "Error response from auth service: " + clientResponse.statusCode(),
                                clientResponse.statusCode().value(),
                                clientResponse.statusCode().getReasonPhrase(),
                                clientResponse.headers().asHttpHeaders(),
                                null,
                                null)))
                .bodyToMono(new ParameterizedTypeReference<Map<String, String>>() {})
                .map(response -> {
                    if (response == null) {
                        throw new WebClientResponseException("No access token received from auth service", HttpStatus.INTERNAL_SERVER_ERROR.value(), HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase(), null, null, null);
                    }
                    String accessToken = response.get("access_token");
                    double expiresIn = Integer.parseInt(response.get("expires_in")) * 0.8;
                    tokenExpirationTime = Instant.now().plusSeconds((long) expiresIn);
                    cachedToken = accessToken;
                    LOGGER.info("Fetched new token");
                    return accessToken;
                })
                .onErrorResume(WebClientResponseException.class, e -> {
                    LOGGER.error("Error while fetching access token: ", e);
                    return Mono.error(e);
                });
    }
}
